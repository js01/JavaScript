import{_ as s,o as a,c as n,O as l}from"./chunks/framework.56b4393c.js";const C=JSON.parse('{"title":"函数内部的this对象","description":"","frontmatter":{},"headers":[],"relativePath":"函数内部的this对象.md","filePath":"函数内部的this对象.md"}'),p={name:"函数内部的this对象.md"},o=l(`<h1 id="函数内部的this对象" tabindex="-1">函数内部的this对象 <a class="header-anchor" href="#函数内部的this对象" aria-label="Permalink to &quot;函数内部的this对象&quot;">​</a></h1><p>this，顾名思义，就是“这个”。</p><p>this被用在对象的方法中，表示“这个对象”。</p><p>函数可以被用作对象的方法。同一个函数，被不同对象调用时，上下文是不一样的，this指代调用的上下文对象。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">sayName</span><span style="color:#89DDFF;">(){</span></span>
<span class="line"><span style="color:#F07178;">	</span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">I am </span><span style="color:#89DDFF;">\${</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}\`</span><span style="color:#F07178;">)   </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> zhangsan </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Zhang San</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">sayName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> sayName</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> lisi </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">name </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Li Si</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#F07178;">sayName </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> sayName</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">zhangsan</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sayName</span><span style="color:#A6ACCD;">()   </span><span style="color:#676E95;font-style:italic;">// I am Zhang San  </span></span>
<span class="line"><span style="color:#A6ACCD;">lisi</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">sayName</span><span style="color:#A6ACCD;">()   </span><span style="color:#676E95;font-style:italic;">// I am Li Si</span></span></code></pre></div>`,5),e=[o];function t(c,r,y,D,i,F){return a(),n("div",null,e)}const _=s(p,[["render",t]]);export{C as __pageData,_ as default};
