import{_ as s,o as a,c as n,O as l}from"./chunks/framework.56b4393c.js";const F=JSON.parse('{"title":"数组的fill()方法","description":"","frontmatter":{},"headers":[],"relativePath":"数组的fill()方法.md","filePath":"数组的fill()方法.md"}'),p={name:"数组的fill()方法.md"},o=l(`<h1 id="数组的fill-方法" tabindex="-1">数组的fill()方法 <a class="header-anchor" href="#数组的fill-方法" aria-label="Permalink to &quot;数组的fill()方法&quot;">​</a></h1><p>数组的fill()可以让数组在指定的索引范围内填入相同的值，该方法接收三个参数： 要填充的值、起始索引(默认为0)、终止索引(默认为最后一个元素，可以用负整数表示倒数)。</p><p>fill()方法会修改源数组，来看下面的例子：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr1 </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> [</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">3</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">4</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">5</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr2</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arr1]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr3</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">[</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">arr1]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">arr1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fill</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(arr1)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [20,20,20,20,20,20]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// =&gt; 所有位置都填充为20</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">arr2</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fill</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(arr2)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [1,2,20,20,20,20]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 从第3个元素开始，一直到结尾</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">arr3</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">fill</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">20</span><span style="color:#89DDFF;">,</span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,-</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// [1,20,20,20,5,6]</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 从第2个开始(包含)，到倒数第二个结束(不包含)</span></span></code></pre></div>`,4),e=[o];function t(c,r,C,y,i,A){return a(),n("div",null,e)}const _=s(p,[["render",t]]);export{F as __pageData,_ as default};
