import{_ as s,o as a,c as n,O as l}from"./chunks/framework.56b4393c.js";const F=JSON.parse('{"title":"数组的flat()方法","description":"","frontmatter":{},"headers":[],"relativePath":"数组的flat()方法.md","filePath":"数组的flat()方法.md"}'),o={name:"数组的flat()方法.md"},p=l(`<h1 id="数组的flat-方法" tabindex="-1">数组的flat()方法 <a class="header-anchor" href="#数组的flat-方法" aria-label="Permalink to &quot;数组的flat()方法&quot;">​</a></h1><p>有些场景下，我们需要将具有嵌套结构的数组打平，ES2019新增了flat()方法用于数组的打平操作，例如：</p><div class="language-j"><button title="Copy Code" class="copy"></button><span class="lang">j</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">const arr1= [ 1, [2,3],4 ]</span></span>
<span class="line"><span style="color:#A6ACCD;">const arr2=arr.flat()</span></span>
<span class="line"><span style="color:#A6ACCD;">console.log(arr2)   //=&gt;[1,2,3,4]</span></span></code></pre></div><p>该方法还可以接收一个整数，表示打平的深度，默认情况下，打平一级嵌套，例如：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">[[[</span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;">]]]   </span><span style="color:#676E95;font-style:italic;">// 三级嵌套</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr1</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">flat</span><span style="color:#A6ACCD;">()  </span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(arr1)    </span><span style="color:#676E95;font-style:italic;">//=&gt; [[1]]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr2</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">flat</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">2</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(arr2)  </span><span style="color:#676E95;font-style:italic;">//=&gt;[1]</span></span></code></pre></div><p>注意，当打平深度高于嵌套层级时，永远只会返回一维数组：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// const arr=[[[1]]]</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> arr3</span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;">arr</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">flat</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">6</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(arr)   </span><span style="color:#676E95;font-style:italic;">//=&gt;[1]</span></span></code></pre></div><p>也就是说，打平的结果永远还是数组。</p>`,8),t=[p];function e(c,r,A,C,y,i){return a(),n("div",null,t)}const _=s(o,[["render",e]]);export{F as __pageData,_ as default};
